import random
import os
import re
import logging
from datetime import time
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# üîë –ó–ê–ú–ï–ù–ò –≠–¢–û–¢ –¢–û–ö–ï–ù –ù–ê –°–í–û–ô –û–¢ @BotFather!
BOT_TOKEN = "TOKEN"

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–∏—Ç–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞ —Ä—è–¥–æ–º —Å –±–æ—Ç–æ–º
def load_quotes(filename="quotes.txt"):
    current_dir = os.path.dirname(os.path.abspath(__file__))
    file_path = os.path.join(current_dir, filename)
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            quotes = [line.strip() for line in f if line.strip()]
        return quotes
    except FileNotFoundError:
        return ["–§–∞–π–ª quotes.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π –µ–≥–æ —Ä—è–¥–æ–º —Å bot.py!"]

QUOTES = load_quotes()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏)
USER_STATE = {}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç—ã (–¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏)
async def send_quote_job(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    if QUOTES:
        quote = random.choice(QUOTES)
        await context.bot.send_message(chat_id=chat_id, text=f"‚ú® {quote}")
    else:
        await context.bot.send_message(chat_id=chat_id, text="–¶–∏—Ç–∞—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å...")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("‚ú® –ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É")],
            [KeyboardButton("‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00 UTC")],
            [KeyboardButton("üïí –í—ã–±—Ä–∞—Ç—å —Å–≤–æ—ë –≤—Ä–µ–º—è")],
            [KeyboardButton("üìÖ –ö–∞–∂–¥—ã–π —á–∞—Å")],
            [KeyboardButton("üõë –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üåü –Ø –±–æ—Ç-—Ü–∏—Ç–∞—Ç–Ω–∏–∫. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫–∏)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.effective_chat.id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_jobs = context.job_queue.get_jobs_by_name(str(chat_id))
    
    if text == "‚ú® –ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É":
        if QUOTES:
            quote = random.choice(QUOTES)
            await update.message.reply_text(f"‚ú® {quote}")
        else:
            await update.message.reply_text("–¶–∏—Ç–∞—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å...")

    elif text == "üìÖ –ö–∞–∂–¥—ã–π —á–∞—Å":
        for job in current_jobs:
            job.schedule_removal()
        context.job_queue.run_repeating(
            send_quote_job,
            interval=3600,
            first=1,
            chat_id=chat_id,
            name=str(chat_id)
        )
        await update.message.reply_text(
            "‚úÖ –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ü–∏—Ç–∞—Ç—É –∫–∞–∂–¥—ã–π —á–∞—Å!\n"
            "–ù–∞–∂–º–∏ ¬´üõë –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å."
        )

    elif text == "‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00 UTC":
        for job in current_jobs:
            job.schedule_removal()
        context.job_queue.run_daily(
            send_quote_job,
            time=time(hour=9, minute=0),
            chat_id=chat_id,
            name=str(chat_id)
        )
        await update.message.reply_text(
            "‚úÖ –¶–∏—Ç–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –ø–æ UTC.\n"
            "–ù–∞–∂–º–∏ ¬´üõë –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å."
        )

    elif text == "üïí –í—ã–±—Ä–∞—Ç—å —Å–≤–æ—ë –≤—Ä–µ–º—è":
        for job in current_jobs:
            job.schedule_removal()
        USER_STATE[chat_id] = "awaiting_time"
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–ø–æ UTC).\n"
            "–ü—Ä–∏–º–µ—Ä: 14:30"
        )

    elif text == "üõë –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
        if current_jobs:
            for job in current_jobs:
                job.schedule_removal()
            await update.message.reply_text("‚èπ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        else:
            await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.")

    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
        if USER_STATE.get(chat_id) == "awaiting_time":
            del USER_STATE[chat_id]
            if not re.match(r"^\d{1,2}:\d{2}$", text):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30")
                return
            try:
                hour, minute = map(int, text.split(":"))
                if not (0 <= hour <= 23) or not (0 <= minute <= 59):
                    raise ValueError
                send_time = time(hour=hour, minute=minute)
                context.job_queue.run_daily(
                    send_quote_job,
                    time=send_time,
                    chat_id=chat_id,
                    name=str(chat_id)
                )
                await update.message.reply_text(
                    f"‚úÖ –¶–∏—Ç–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {hour:02d}:{minute:02d} –ø–æ UTC.\n"
                    "–ù–∞–∂–º–∏ ¬´üõë –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å."
                )
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è! –ß–∞—Å—ã: 0‚Äì23, –º–∏–Ω—É—Ç—ã: 0‚Äì59.")
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            await update.message.reply_text(
                "–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö:",
                reply_markup=get_main_keyboard()
            )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("Bot is running! Send /start in Telegram.")
    application.run_polling()

if __name__ == "__main__":
    main()