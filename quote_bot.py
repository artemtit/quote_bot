import random
import os
import re
import logging
from datetime import time
from collections import deque
import pytz
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞! –£–∫–∞–∂–∏ –µ—ë –≤ —Ñ–∞–π–ª–µ .env")

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–æ—Å–∫–≤—ã
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–∏—Ç–∞—Ç
def load_quotes(filename="quotes.txt"):
    current_dir = os.path.dirname(os.path.abspath(__file__))
    file_path = os.path.join(current_dir, filename)
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            quotes = [line.strip() for line in f if line.strip()]
        return quotes
    except FileNotFoundError:
        return ["–§–∞–π–ª quotes.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π –µ–≥–æ —Ä—è–¥–æ–º —Å bot.py!"]

ALL_QUOTES = load_quotes()
USER_STATE = {}

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ü–∏—Ç–∞—Ç—ã –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ ---
async def send_quote_to_user(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    if not ALL_QUOTES:
        await context.bot.send_message(chat_id=chat_id, text="–¶–∏—Ç–∞—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å...")
        return

    if 'user_queues' not in context.application.bot_data:
        context.application.bot_data['user_queues'] = {}
    queues = context.application.bot_data['user_queues']

    if chat_id not in queues or not queues[chat_id]:
        shuffled = ALL_QUOTES.copy()
        random.shuffle(shuffled)
        queues[chat_id] = deque(shuffled)

    quote = queues[chat_id].popleft()
    await context.bot.send_message(chat_id=chat_id, text=f"‚ú® {quote}")

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("‚ú® –ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É")],
            [KeyboardButton("‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00")],
            [KeyboardButton("üïí –í—ã–±—Ä–∞—Ç—å —Å–≤–æ—ë –≤—Ä–µ–º—è")],
            [KeyboardButton("üìÖ –ö–∞–∂–¥—ã–π —á–∞—Å")],
            [KeyboardButton("üõë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_user_jobs(job_queue, chat_id):
    prefix = f"{chat_id}_"
    return [job for job in job_queue.jobs() if job.name and job.name.startswith(prefix)]

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üåü –Ø –±–æ—Ç-—Ü–∏—Ç–∞—Ç–Ω–∏–∫. –í—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ **–º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏**.",
        reply_markup=get_main_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.effective_chat.id

    if text == "‚ú® –ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É":
        await send_quote_to_user(context, chat_id)

    elif text == "üìÖ –ö–∞–∂–¥—ã–π —á–∞—Å":
        job_name = f"{chat_id}_hourly"
        existing = [j for j in context.job_queue.jobs() if j.name == job_name]
        if existing:
            await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ ¬´–ö–∞–∂–¥—ã–π —á–∞—Å¬ª —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        else:
            context.job_queue.run_repeating(
                lambda ctx: send_quote_to_user(ctx, chat_id),
                interval=3600,
                first=1,
                chat_id=chat_id,
                name=job_name
            )
            await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ ¬´–ö–∞–∂–¥—ã–π —á–∞—Å¬ª –≤–∫–ª—é—á–µ–Ω–∞ (–ø–æ –ú–æ—Å–∫–≤–µ).")

    elif text == "‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00":
        job_name = f"{chat_id}_daily_09-00"
        existing = [j for j in context.job_queue.jobs() if j.name == job_name]
        if existing:
            await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ ¬´–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00¬ª —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        else:
            send_time = time(hour=9, minute=0, tzinfo=MOSCOW_TZ)
            context.job_queue.run_daily(
                lambda ctx: send_quote_to_user(ctx, chat_id),
                time=send_time,
                chat_id=chat_id,
                name=job_name
            )
            await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ ¬´–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00 –ø–æ –ú–æ—Å–∫–≤–µ¬ª –≤–∫–ª—é—á–µ–Ω–∞.")

    elif text == "üïí –í—ã–±—Ä–∞—Ç—å —Å–≤–æ—ë –≤—Ä–µ–º—è":
        USER_STATE[chat_id] = "awaiting_time"
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏).\n–ü—Ä–∏–º–µ—Ä: 14:30")

    elif text == "üõë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏":
        jobs = get_user_jobs(context.job_queue, chat_id)
        if not jobs:
            await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.")
        else:
            buttons = []
            for job in jobs:
                name = job.name.replace(f"{chat_id}_", "")
                if name == "hourly":
                    label = "–ö–∞–∂–¥—ã–π —á–∞—Å"
                elif name.startswith("daily_"):
                    time_part = name.replace("daily_", "").replace("-", ":")
                    label = f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {time_part}"
                elif name.startswith("custom_"):
                    time_part = name.replace("custom_", "").replace("-", ":")
                    label = f"–í {time_part}"
                else:
                    label = name
                buttons.append([InlineKeyboardButton(f"‚ùå {label}", callback_data=f"remove_{job.name}")])
            buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—ë", callback_data="remove_all")])
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(buttons)
            )

    else:
        if USER_STATE.get(chat_id) == "awaiting_time":
            del USER_STATE[chat_id]
            if not re.match(r"^\d{1,2}:\d{2}$", text):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 14:30")
                return
            try:
                hour, minute = map(int, text.split(":"))
                if 0 <= hour <= 23 and 0 <= minute <= 59:
                    time_str = f"{hour:02d}:{minute:02d}"
                    job_name = f"{chat_id}_custom_{time_str.replace(':', '-')}"
                    existing = [j for j in context.job_queue.jobs() if j.name == job_name]
                    if existing:
                        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ ¬´–í {time_str}¬ª —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.")
                    else:
                        send_time = time(hour=hour, minute=minute, tzinfo=MOSCOW_TZ)
                        context.job_queue.run_daily(
                            lambda ctx: send_quote_to_user(ctx, chat_id),
                            time=send_time,
                            chat_id=chat_id,
                            name=job_name
                        )
                        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ ¬´–í {time_str} –ø–æ –ú–æ—Å–∫–≤–µ¬ª –≤–∫–ª—é—á–µ–Ω–∞.")
                else:
                    raise ValueError
            except ValueError:
                await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 00:00 –¥–æ 23:59.")
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=get_main_keyboard())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    chat_id = update.effective_chat.id

    if data == "remove_all":
        jobs = get_user_jobs(context.job_queue, chat_id)
        for job in jobs:
            job.schedule_removal()
        await query.edit_message_text(f"‚èπ –û—Ç–∫–ª—é—á–µ–Ω–æ {len(jobs)} —Ä–∞—Å—Å—ã–ª–æ–∫.")
    elif data.startswith("remove_"):
        job_name = data.replace("remove_", "")
        jobs = [j for j in context.job_queue.jobs() if j.name == job_name]
        if jobs:
            jobs[0].schedule_removal()
            await query.edit_message_text("‚èπ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        else:
            await query.edit_message_text("–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_handler))
    print("Bot is running! Send /start in Telegram.")
    application.run_polling()

if __name__ == "__main__":
    main()